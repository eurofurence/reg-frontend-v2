/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as IndexRouteImport } from './routes/index'
import { Route as RegisterIndexRouteImport } from './routes/register/index'
import { Route as RegisterTicketRouteImport } from './routes/register/ticket'
import { Route as RegisterSummaryRouteImport } from './routes/register/summary'
import { Route as RegisterPersonalInfoRouteImport } from './routes/register/personal-info'
import { Route as RegisterTicketTypeRouteImport } from './routes/register/ticket/type'
import { Route as RegisterTicketLevelRouteImport } from './routes/register/ticket/level'
import { Route as RegisterTicketDayRouteImport } from './routes/register/ticket/day'

const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const RegisterIndexRoute = RegisterIndexRouteImport.update({
  id: '/register/',
  path: '/register/',
  getParentRoute: () => rootRouteImport,
} as any)
const RegisterTicketRoute = RegisterTicketRouteImport.update({
  id: '/register/ticket',
  path: '/register/ticket',
  getParentRoute: () => rootRouteImport,
} as any)
const RegisterSummaryRoute = RegisterSummaryRouteImport.update({
  id: '/register/summary',
  path: '/register/summary',
  getParentRoute: () => rootRouteImport,
} as any)
const RegisterPersonalInfoRoute = RegisterPersonalInfoRouteImport.update({
  id: '/register/personal-info',
  path: '/register/personal-info',
  getParentRoute: () => rootRouteImport,
} as any)
const RegisterTicketTypeRoute = RegisterTicketTypeRouteImport.update({
  id: '/type',
  path: '/type',
  getParentRoute: () => RegisterTicketRoute,
} as any)
const RegisterTicketLevelRoute = RegisterTicketLevelRouteImport.update({
  id: '/level',
  path: '/level',
  getParentRoute: () => RegisterTicketRoute,
} as any)
const RegisterTicketDayRoute = RegisterTicketDayRouteImport.update({
  id: '/day',
  path: '/day',
  getParentRoute: () => RegisterTicketRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/register/personal-info': typeof RegisterPersonalInfoRoute
  '/register/summary': typeof RegisterSummaryRoute
  '/register/ticket': typeof RegisterTicketRouteWithChildren
  '/register': typeof RegisterIndexRoute
  '/register/ticket/day': typeof RegisterTicketDayRoute
  '/register/ticket/level': typeof RegisterTicketLevelRoute
  '/register/ticket/type': typeof RegisterTicketTypeRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/register/personal-info': typeof RegisterPersonalInfoRoute
  '/register/summary': typeof RegisterSummaryRoute
  '/register/ticket': typeof RegisterTicketRouteWithChildren
  '/register': typeof RegisterIndexRoute
  '/register/ticket/day': typeof RegisterTicketDayRoute
  '/register/ticket/level': typeof RegisterTicketLevelRoute
  '/register/ticket/type': typeof RegisterTicketTypeRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/register/personal-info': typeof RegisterPersonalInfoRoute
  '/register/summary': typeof RegisterSummaryRoute
  '/register/ticket': typeof RegisterTicketRouteWithChildren
  '/register/': typeof RegisterIndexRoute
  '/register/ticket/day': typeof RegisterTicketDayRoute
  '/register/ticket/level': typeof RegisterTicketLevelRoute
  '/register/ticket/type': typeof RegisterTicketTypeRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/register/personal-info'
    | '/register/summary'
    | '/register/ticket'
    | '/register'
    | '/register/ticket/day'
    | '/register/ticket/level'
    | '/register/ticket/type'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/register/personal-info'
    | '/register/summary'
    | '/register/ticket'
    | '/register'
    | '/register/ticket/day'
    | '/register/ticket/level'
    | '/register/ticket/type'
  id:
    | '__root__'
    | '/'
    | '/register/personal-info'
    | '/register/summary'
    | '/register/ticket'
    | '/register/'
    | '/register/ticket/day'
    | '/register/ticket/level'
    | '/register/ticket/type'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  RegisterPersonalInfoRoute: typeof RegisterPersonalInfoRoute
  RegisterSummaryRoute: typeof RegisterSummaryRoute
  RegisterTicketRoute: typeof RegisterTicketRouteWithChildren
  RegisterIndexRoute: typeof RegisterIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/register/': {
      id: '/register/'
      path: '/register'
      fullPath: '/register'
      preLoaderRoute: typeof RegisterIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/register/ticket': {
      id: '/register/ticket'
      path: '/register/ticket'
      fullPath: '/register/ticket'
      preLoaderRoute: typeof RegisterTicketRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/register/summary': {
      id: '/register/summary'
      path: '/register/summary'
      fullPath: '/register/summary'
      preLoaderRoute: typeof RegisterSummaryRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/register/personal-info': {
      id: '/register/personal-info'
      path: '/register/personal-info'
      fullPath: '/register/personal-info'
      preLoaderRoute: typeof RegisterPersonalInfoRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/register/ticket/type': {
      id: '/register/ticket/type'
      path: '/type'
      fullPath: '/register/ticket/type'
      preLoaderRoute: typeof RegisterTicketTypeRouteImport
      parentRoute: typeof RegisterTicketRoute
    }
    '/register/ticket/level': {
      id: '/register/ticket/level'
      path: '/level'
      fullPath: '/register/ticket/level'
      preLoaderRoute: typeof RegisterTicketLevelRouteImport
      parentRoute: typeof RegisterTicketRoute
    }
    '/register/ticket/day': {
      id: '/register/ticket/day'
      path: '/day'
      fullPath: '/register/ticket/day'
      preLoaderRoute: typeof RegisterTicketDayRouteImport
      parentRoute: typeof RegisterTicketRoute
    }
  }
}

interface RegisterTicketRouteChildren {
  RegisterTicketDayRoute: typeof RegisterTicketDayRoute
  RegisterTicketLevelRoute: typeof RegisterTicketLevelRoute
  RegisterTicketTypeRoute: typeof RegisterTicketTypeRoute
}

const RegisterTicketRouteChildren: RegisterTicketRouteChildren = {
  RegisterTicketDayRoute: RegisterTicketDayRoute,
  RegisterTicketLevelRoute: RegisterTicketLevelRoute,
  RegisterTicketTypeRoute: RegisterTicketTypeRoute,
}

const RegisterTicketRouteWithChildren = RegisterTicketRoute._addFileChildren(
  RegisterTicketRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  RegisterPersonalInfoRoute: RegisterPersonalInfoRoute,
  RegisterSummaryRoute: RegisterSummaryRoute,
  RegisterTicketRoute: RegisterTicketRouteWithChildren,
  RegisterIndexRoute: RegisterIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
